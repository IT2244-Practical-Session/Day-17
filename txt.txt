//01

//Write a C program that:
//Prints "Program Started"
//Pauses execution for 3 seconds using a system function
//Prints "Exiting the program."
//Exits the program cleanly using the exit() function

#include<stdio.h>  //for printf()
#include<stdlib.h> //for exit()
#include<unistd.h> //for sleep()

int main()
{
	printf("Program Started\n");
	
	printf("Sleeping for 3 seconds...\n");
	sleep(3);  //pause for 3 seconds
	
	printf("Exiting the program.\n");
	exit(0);  //clean exit
	return 0;
}
[2021ict10@fedora ~]$ vi first.c
[2021ict10@fedora ~]$ gcc first.c -o first
[2021ict10@fedora ~]$ ./first
Program Started
Sleeping for 3 seconds...
Exiting the program.

//02

//Write a C program that:
//Creates a child process using fork().
//In the child process:
//Print the child’s process ID.
//Sleep for 2 seconds.
//Exit with status code 0.
//In the parent process:
//Print its own process ID.
//Wait for the child to terminate using wait().
//Check if the child exited normally.
//Print the child’s exit status.
//Then end the parent process.
//Use appropriate system headers and demonstrate process handling with fork(), sleep(), and wait().


#include<stdio.h>
#include<stdlib.h> //for exit()
#include<unistd.h> //for fork(),sleep()
#include<sys/wait.h>  //for wait()

int main()
{
	pid_t pid; //initialize pid using pid_t data type
	printf("Parent process started. PID: %d\n",getpid());
	
	pid=fork();  //create a new child process
	
	if (pid<0)
	{
		perror("fork failed");
		exit(1);
	}
	
	else if(pid==0)
	{
		//child process
		printf("Child process. PID: %d, sleeping for 2 seconds...\n",getpid());
		sleep(2);
		printf("Child process exiting...\n");
		exit(0); //childs exits with status 0
	}
	
	else
	{
		//parent process
		int status;
		printf("Parent waiting for child to finish...\n");
		wait(&status); //wait for child to finish
		if (WIFEXITED(status))  //WIFEXITED(status) returns 
		                        //true if child terminated normally.
		{
			printf("Child exited with status: %d\n",WEXITSTATUS(status));
			//WEXITSTATUS(status) gets the actual exit code (0 here)
		}
		else
		{
			printf("Child didnot exit normally.\n");
		}
		printf("Parent process ending.\n");
	}
	return 0;
}


[2021ict10@fedora ~]$ vi second.c
[2021ict10@fedora ~]$ gcc second.c -o second
[2021ict10@fedora ~]$  ./second
Parent process started. PID: 19818
Parent waiting for child to finish...
Child process. PID: 19819, sleeping for 2 seconds...
Child process exiting...
Child exited with status: 0
Parent process ending.
//03
//first child:slept for 1 second
//second child;slept for 3 seconds
//parent:both children have finished


#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>  
#include<stdlib.h>
int main()
{
	pid_t pid1=fork();
	
	if(pid1==0)
	{
		sleep(1);
		printf("First Child:Slept for 1 second\n");
		return 0;
	}
	
	else
	{
		pid_t pid2=fork();
		
		if(pid2==0)
		{
			sleep(3);
			printf("Second Child:Slept for 3 second\n");
		    return 0;
		}
		
		wait(NULL);
		wait(NULL);
		printf("Parent:Both children have finished.\n");
		
		return 0;
	}
}

//

#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>  
#include<stdlib.h>

int main()
{
	
	printf("Parent process started... PID: %d\n",getpid());
	
	int f1=fork();
	if(f1==0)
	{
		printf("First Child process started... PID: %d , sleeping for 1 second...\n",getpid());
		sleep(1);
		printf("First Child process exiting...\n");
		exit(0);
	}
	
	else
	{
		int f2=fork();
		
		if (f2==0)
		{
			printf("Second Child process started... PID: %d , sleeping for 3 seconds...\n",getpid());
			sleep(3);
			printf("Second Child process exiting...\n");
			exit(0);
		}
		
		else
		{
			int status;
		printf("Parent waiting for child to finish...\n");
		wait(&status); 
		if (WIFEXITED(status))  
		                        
		{
			printf("Child exited with status: %d\n",WEXITSTATUS(status));
			
		}
		else
		{
			printf("Child didnot exit normally.\n");
		}
		printf("Parent process ending.\n");
		}
	}
	return 0;
}
